####################### exp14
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.ChatGpt</groupId>
  <artifactId>SonarPro</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>SonarPro</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <sonar.projectKey>SonarPro</sonar.projectKey>
    <sonar.host.url>http://localhost:9000</sonar.host.url>
    <sonar.login>sqp_6d7f0e900f30ec4099588950afc607a25dc9274f</sonar.login>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.sonarsource.scanner.maven</groupId>
        <artifactId>sonar-maven-plugin</artifactId>
        <version>3.9.1.2184</version>
      </plugin>
    </plugins>
  </build>

</project>


############################exp15
Create and Configure Jenkins Pipeline:
1. Save the following Jenkinsfile in the root of your project
pipeline {
 agent any
 environment {
 MAVEN_HOME = tool 'Maven' 
 SONARQUBE_SERVER = 'SonarQube' 
 }
 stages {
stage('Checkout') {
 steps {
 git url: 'file:///path/to/your/local/repo' // Update this path
 }
 }
stage('Build') {
 steps {
 script {
 try {
 sh "${MAVEN_HOME}/bin/mvn clean compile"
 } catch (Exception e) {
 error("Build failed: ${e.message}")
 }
 }
 }
 }
 stage('Unit Test') {
 steps {
 script {
 try {
 sh "${MAVEN_HOME}/bin/mvn test"
 } catch (Exception e) {
 error("Tests failed: ${e.message}")
 }
 }
 }
 post {
 always {
 junit 'pom.xml' 
 }
}
 }
 stage('Quality Gate') {
 steps {
 script {
 withSonarQubeEnv(SONARQUBE_SERVER) {
 sh "${MAVEN_HOME}/bin/mvn sonar:sonar -Dsonar.login=YOUR_TOKEN" 
 }
 }
 }
 }
 stage('Deploy') {
 steps {
 script {
 try {
 echo "Deploying application locally..."
 } catch (Exception e) {
 error("Deployment failed: ${e.message}")
 }
 }
 }
 }
 }
 post {
 success {
 echo 'Pipeline completed successfully!'
 }
 failure {
 echo 'Pipeline failed!'
 }
}
}


